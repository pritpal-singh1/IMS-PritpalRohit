import { __decorate } from "tslib";
import { EventEmitter, Directive } from '@angular/core';
import { WizardStep } from './wizard-step.interface';
/**
 * Basic functionality every wizard completion step needs to provide
 *
 * @author Marc Arndt
 */
import * as ɵngcc0 from '@angular/core';
let WizardCompletionStep = class WizardCompletionStep extends WizardStep {
    constructor() {
        super(...arguments);
        /**
         * @inheritDoc
         */
        this.stepExit = new EventEmitter();
        /**
         * @inheritDoc
         */
        this.canExit = false;
    }
    /**
     * @inheritDoc
     */
    enter(direction) {
        this.completed = true;
        this.stepEnter.emit(direction);
    }
    /**
     * @inheritDoc
     */
    exit(direction) {
        // set this completion step as incomplete (unless it happens to be initiallyCompleted)
        this.completed = this.initiallyCompleted;
        this.stepExit.emit(direction);
    }
};
WizardCompletionStep.ɵfac = function WizardCompletionStep_Factory(t) { return ɵWizardCompletionStep_BaseFactory(t || WizardCompletionStep); };
WizardCompletionStep.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WizardCompletionStep, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
const ɵWizardCompletionStep_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WizardCompletionStep, [{
        type: Directive
    }], null, null); })();
export { WizardCompletionStep };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLWNvbXBsZXRpb24tc3RlcC5pbnRlcmZhY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWFyY2h3aXphcmQvbGliL3V0aWwvd2l6YXJkLWNvbXBsZXRpb24tc3RlcC5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUduRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsSUFBc0Isb0JBQW9CLEdBQTFDLE1BQXNCLG9CQUFxQixTQUFRLFVBQVU7QUFDN0QsSUFEQTtBQUFnQjtBQUE2QixRQUMzQztBQUNGO0FBRUEsV0FESztBQUNMLFFBQVMsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDO0FBQ3hELFFBQ0U7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUFTLFlBQU8sR0FBd0QsS0FBSyxDQUFDO0FBQzlFLElBaUJBLENBQUM7QUFDRCxJQWpCRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVMsS0FBSyxDQUFDLFNBQTBCO0FBQUksUUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBUyxJQUFJLENBQUMsU0FBMEI7QUFBSSxRQUN4QyxzRkFBc0Y7QUFDMUYsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUM3QyxRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQTNCcUIsb0JBQW9CLG9CQUR6QyxTQUFTLEVBQUUsSUFDVSxvQkFBb0IsQ0EyQnpDOzs7OzswQkFDRDs7QUF0Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFJQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBa0JBLEFBQUEsQUFoQkEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTNCQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTJCQSxBQTNCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dpemFyZFN0ZXB9IGZyb20gJy4vd2l6YXJkLXN0ZXAuaW50ZXJmYWNlJztcbmltcG9ydCB7TW92aW5nRGlyZWN0aW9ufSBmcm9tICcuL21vdmluZy1kaXJlY3Rpb24uZW51bSc7XG5cbi8qKlxuICogQmFzaWMgZnVuY3Rpb25hbGl0eSBldmVyeSB3aXphcmQgY29tcGxldGlvbiBzdGVwIG5lZWRzIHRvIHByb3ZpZGVcbiAqXG4gKiBAYXV0aG9yIE1hcmMgQXJuZHRcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgV2l6YXJkQ29tcGxldGlvblN0ZXAgZXh0ZW5kcyBXaXphcmRTdGVwIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RlcEV4aXQgPSBuZXcgRXZlbnRFbWl0dGVyPE1vdmluZ0RpcmVjdGlvbj4oKTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBjYW5FeGl0OiAoKGRpcmVjdGlvbjogTW92aW5nRGlyZWN0aW9uKSA9PiBib29sZWFuKSB8IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBlbnRlcihkaXJlY3Rpb246IE1vdmluZ0RpcmVjdGlvbik6IHZvaWQge1xuICAgIHRoaXMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN0ZXBFbnRlci5lbWl0KGRpcmVjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBleGl0KGRpcmVjdGlvbjogTW92aW5nRGlyZWN0aW9uKTogdm9pZCB7XG4gICAgLy8gc2V0IHRoaXMgY29tcGxldGlvbiBzdGVwIGFzIGluY29tcGxldGUgKHVubGVzcyBpdCBoYXBwZW5zIHRvIGJlIGluaXRpYWxseUNvbXBsZXRlZClcbiAgICB0aGlzLmNvbXBsZXRlZCA9IHRoaXMuaW5pdGlhbGx5Q29tcGxldGVkO1xuICAgIHRoaXMuc3RlcEV4aXQuZW1pdChkaXJlY3Rpb24pO1xuICB9XG59XG4iXX0=