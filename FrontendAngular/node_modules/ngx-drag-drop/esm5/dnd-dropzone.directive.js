/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChild, Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, Renderer2 } from "@angular/core";
import { getDirectChildElement, getDropData, shouldPositionPlaceholderBeforeElement } from "./dnd-utils";
import { getDndType, getDropEffect, isExternalDrag, setDropEffect } from "./dnd-state";
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function DndDropEvent() { }
if (false) {
    /** @type {?} */
    DndDropEvent.prototype.event;
    /** @type {?} */
    DndDropEvent.prototype.dropEffect;
    /** @type {?} */
    DndDropEvent.prototype.isExternal;
    /** @type {?|undefined} */
    DndDropEvent.prototype.data;
    /** @type {?|undefined} */
    DndDropEvent.prototype.index;
    /** @type {?|undefined} */
    DndDropEvent.prototype.type;
}
var DndPlaceholderRefDirective = /** @class */ (function () {
    function DndPlaceholderRefDirective(elementRef) {
        this.elementRef = elementRef;
    }
    /** @nocollapse */
    DndPlaceholderRefDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
DndPlaceholderRefDirective.ɵfac = function DndPlaceholderRefDirective_Factory(t) { return new (t || DndPlaceholderRefDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DndPlaceholderRefDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DndPlaceholderRefDirective, selectors: [["", "dndPlaceholderRef", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DndPlaceholderRefDirective, [{
        type: Directive,
        args: [{
                selector: "[dndPlaceholderRef]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return DndPlaceholderRefDirective;
}());
export { DndPlaceholderRefDirective };
if (false) {
    /** @type {?} */
    DndPlaceholderRefDirective.prototype.elementRef;
}
var DndDropzoneDirective = /** @class */ (function () {
    function DndDropzoneDirective(ngZone, elementRef, renderer) {
        var _this = this;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.dndAllowExternal = false;
        this.dndHorizontal = false;
        this.dndDragoverClass = "dndDragover";
        this.dndDropzoneDisabledClass = "dndDropzoneDisabled";
        this.dndDragover = new EventEmitter();
        this.dndDrop = new EventEmitter();
        this.placeholder = null;
        this.disabled = false;
        this.dragEnterEventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onDragEnter(event); });
        this.dragOverEventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onDragOver(event); });
        this.dragLeaveEventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onDragLeave(event); });
    }
    Object.defineProperty(DndDropzoneDirective.prototype, "dndDisableIf", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.disabled = !!value;
            if (this.disabled) {
                this.renderer.addClass(this.elementRef.nativeElement, this.dndDropzoneDisabledClass);
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, this.dndDropzoneDisabledClass);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DndDropzoneDirective.prototype, "dndDisableDropIf", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dndDisableIf = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DndDropzoneDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.placeholder = this.tryGetPlaceholder();
        this.removePlaceholderFromDOM();
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.elementRef.nativeElement.addEventListener("dragenter", _this.dragEnterEventHandler);
            _this.elementRef.nativeElement.addEventListener("dragover", _this.dragOverEventHandler);
            _this.elementRef.nativeElement.addEventListener("dragleave", _this.dragLeaveEventHandler);
        }));
    };
    /**
     * @return {?}
     */
    DndDropzoneDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.removeEventListener("dragenter", this.dragEnterEventHandler);
        this.elementRef.nativeElement.removeEventListener("dragover", this.dragOverEventHandler);
        this.elementRef.nativeElement.removeEventListener("dragleave", this.dragLeaveEventHandler);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDropzoneDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // check if another dropzone is activated
        if (event._dndDropzoneActive === true) {
            this.cleanupDragoverState();
            return;
        }
        // set as active if the target element is inside this dropzone
        if (typeof event._dndDropzoneActive === "undefined") {
            /** @type {?} */
            var newTarget = document.elementFromPoint(event.clientX, event.clientY);
            if (this.elementRef.nativeElement.contains(newTarget)) {
                event._dndDropzoneActive = true;
            }
        }
        // check if this drag event is allowed to drop on this dropzone
        /** @type {?} */
        var type = getDndType(event);
        if (this.isDropAllowed(type) === false) {
            return;
        }
        // allow the dragenter
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDropzoneDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // With nested dropzones, we want to ignore this event if a child dropzone
        // has already handled a dragover.  Historically, event.stopPropagation() was
        // used to prevent this bubbling, but that prevents any dragovers outside the
        // ngx-drag-drop component, and stops other use cases such as scrolling on drag.
        // Instead, we can check if the event was already prevented by a child and bail early.
        if (event.defaultPrevented) {
            return;
        }
        // check if this drag event is allowed to drop on this dropzone
        /** @type {?} */
        var type = getDndType(event);
        if (this.isDropAllowed(type) === false) {
            return;
        }
        this.checkAndUpdatePlaceholderPosition(event);
        /** @type {?} */
        var dropEffect = getDropEffect(event, this.dndEffectAllowed);
        if (dropEffect === "none") {
            this.cleanupDragoverState();
            return;
        }
        // allow the dragover
        event.preventDefault();
        // set the drop effect
        setDropEffect(event, dropEffect);
        this.dndDragover.emit(event);
        this.renderer.addClass(this.elementRef.nativeElement, this.dndDragoverClass);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDropzoneDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        try {
            // check if this drag event is allowed to drop on this dropzone
            /** @type {?} */
            var type = getDndType(event);
            if (this.isDropAllowed(type) === false) {
                return;
            }
            /** @type {?} */
            var data = getDropData(event, isExternalDrag());
            if (this.isDropAllowed(data.type) === false) {
                return;
            }
            // signal custom drop handling
            event.preventDefault();
            /** @type {?} */
            var dropEffect = getDropEffect(event);
            setDropEffect(event, dropEffect);
            if (dropEffect === "none") {
                return;
            }
            /** @type {?} */
            var dropIndex = this.getPlaceholderIndex();
            // if for whatever reason the placeholder is not present in the DOM but it should be there
            // we don't allow/emit the drop event since it breaks the contract
            // seems to only happen if drag and drop is executed faster than the DOM updates
            if (dropIndex === -1) {
                return;
            }
            this.dndDrop.emit({
                event: event,
                dropEffect: dropEffect,
                isExternal: isExternalDrag(),
                data: data.data,
                index: dropIndex,
                type: type,
            });
            event.stopPropagation();
        }
        finally {
            this.cleanupDragoverState();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDropzoneDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // check if still inside this dropzone and not yet handled by another dropzone
        if (typeof event._dndDropzoneActive === "undefined") {
            /** @type {?} */
            var newTarget = document.elementFromPoint(event.clientX, event.clientY);
            if (this.elementRef.nativeElement.contains(newTarget)) {
                event._dndDropzoneActive = true;
                return;
            }
        }
        this.cleanupDragoverState();
        // cleanup drop effect when leaving dropzone
        setDropEffect(event, "none");
    };
    /**
     * @private
     * @param {?=} type
     * @return {?}
     */
    DndDropzoneDirective.prototype.isDropAllowed = /**
     * @private
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        // dropzone is disabled -> deny it
        if (this.disabled === true) {
            return false;
        }
        // if drag did not start from our directive
        // and external drag sources are not allowed -> deny it
        if (isExternalDrag() === true
            && this.dndAllowExternal === false) {
            return false;
        }
        // no filtering by types -> allow it
        if (!this.dndDropzone) {
            return true;
        }
        // no type set -> allow it
        if (!type) {
            return true;
        }
        if (Array.isArray(this.dndDropzone) === false) {
            throw new Error("dndDropzone: bound value to [dndDropzone] must be an array!");
        }
        // if dropzone contains type -> allow it
        return this.dndDropzone.indexOf(type) !== -1;
    };
    /**
     * @private
     * @return {?}
     */
    DndDropzoneDirective.prototype.tryGetPlaceholder = /**
     * @private
     * @return {?}
     */
    function () {
        if (typeof this.dndPlaceholderRef !== "undefined") {
            return (/** @type {?} */ (this.dndPlaceholderRef.elementRef.nativeElement));
        }
        // TODO nasty workaround needed because if ng-container / template is used @ContentChild() or DI will fail because
        // of wrong context see angular bug https://github.com/angular/angular/issues/13517
        return this.elementRef.nativeElement.querySelector("[dndPlaceholderRef]");
    };
    /**
     * @private
     * @return {?}
     */
    DndDropzoneDirective.prototype.removePlaceholderFromDOM = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.placeholder !== null
            && this.placeholder.parentNode !== null) {
            this.placeholder.parentNode.removeChild(this.placeholder);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    DndDropzoneDirective.prototype.checkAndUpdatePlaceholderPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.placeholder === null) {
            return;
        }
        // make sure the placeholder is in the DOM
        if (this.placeholder.parentNode !== this.elementRef.nativeElement) {
            this.renderer.appendChild(this.elementRef.nativeElement, this.placeholder);
        }
        // update the position if the event originates from a child element of the dropzone
        /** @type {?} */
        var directChild = getDirectChildElement(this.elementRef.nativeElement, (/** @type {?} */ (event.target)));
        // early exit if no direct child or direct child is placeholder
        if (directChild === null
            || directChild === this.placeholder) {
            return;
        }
        /** @type {?} */
        var positionPlaceholderBeforeDirectChild = shouldPositionPlaceholderBeforeElement(event, directChild, this.dndHorizontal);
        if (positionPlaceholderBeforeDirectChild) {
            // do insert before only if necessary
            if (directChild.previousSibling !== this.placeholder) {
                this.renderer.insertBefore(this.elementRef.nativeElement, this.placeholder, directChild);
            }
        }
        else {
            // do insert after only if necessary
            if (directChild.nextSibling !== this.placeholder) {
                this.renderer.insertBefore(this.elementRef.nativeElement, this.placeholder, directChild.nextSibling);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DndDropzoneDirective.prototype.getPlaceholderIndex = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.placeholder === null) {
            return undefined;
        }
        /** @type {?} */
        var element = (/** @type {?} */ (this.elementRef.nativeElement));
        return Array.prototype.indexOf.call(element.children, this.placeholder);
    };
    /**
     * @private
     * @return {?}
     */
    DndDropzoneDirective.prototype.cleanupDragoverState = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.elementRef.nativeElement, this.dndDragoverClass);
        this.removePlaceholderFromDOM();
    };
    /** @nocollapse */
    DndDropzoneDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DndDropzoneDirective.propDecorators = {
        dndDropzone: [{ type: Input }],
        dndEffectAllowed: [{ type: Input }],
        dndAllowExternal: [{ type: Input }],
        dndHorizontal: [{ type: Input }],
        dndDragoverClass: [{ type: Input }],
        dndDropzoneDisabledClass: [{ type: Input }],
        dndDragover: [{ type: Output }],
        dndDrop: [{ type: Output }],
        dndPlaceholderRef: [{ type: ContentChild, args: [DndPlaceholderRefDirective,] }],
        dndDisableIf: [{ type: Input }],
        dndDisableDropIf: [{ type: Input }],
        onDrop: [{ type: HostListener, args: ["drop", ["$event"],] }]
    };
DndDropzoneDirective.ɵfac = function DndDropzoneDirective_Factory(t) { return new (t || DndDropzoneDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
DndDropzoneDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DndDropzoneDirective, selectors: [["", "dndDropzone", ""]], contentQueries: function DndDropzoneDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DndPlaceholderRefDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dndPlaceholderRef = _t.first);
    } }, hostBindings: function DndDropzoneDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function DndDropzoneDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
    } }, inputs: { dndAllowExternal: "dndAllowExternal", dndHorizontal: "dndHorizontal", dndDragoverClass: "dndDragoverClass", dndDropzoneDisabledClass: "dndDropzoneDisabledClass", dndDisableIf: "dndDisableIf", dndDisableDropIf: "dndDisableDropIf", dndDropzone: "dndDropzone", dndEffectAllowed: "dndEffectAllowed" }, outputs: { dndDragover: "dndDragover", dndDrop: "dndDrop" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DndDropzoneDirective, [{
        type: Directive,
        args: [{
                selector: "[dndDropzone]"
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { dndAllowExternal: [{
            type: Input
        }], dndHorizontal: [{
            type: Input
        }], dndDragoverClass: [{
            type: Input
        }], dndDropzoneDisabledClass: [{
            type: Input
        }], dndDragover: [{
            type: Output
        }], dndDrop: [{
            type: Output
        }], dndDisableIf: [{
            type: Input
        }], dndDisableDropIf: [{
            type: Input
        }], onDrop: [{
            type: HostListener,
            args: ["drop", ["$event"]]
        }], dndDropzone: [{
            type: Input
        }], dndEffectAllowed: [{
            type: Input
        }], dndPlaceholderRef: [{
            type: ContentChild,
            args: [DndPlaceholderRefDirective]
        }] }); })();
    return DndDropzoneDirective;
}());
export { DndDropzoneDirective };
if (false) {
    /** @type {?} */
    DndDropzoneDirective.prototype.dndDropzone;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndEffectAllowed;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndAllowExternal;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndHorizontal;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndDragoverClass;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndDropzoneDisabledClass;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndDragover;
    /** @type {?} */
    DndDropzoneDirective.prototype.dndDrop;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.dndPlaceholderRef;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.dragEnterEventHandler;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.dragOverEventHandler;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.dragLeaveEventHandler;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DndDropzoneDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,