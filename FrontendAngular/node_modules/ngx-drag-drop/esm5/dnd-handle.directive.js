/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener } from "@angular/core";
import { DndDraggableDirective } from "./dnd-draggable.directive";
import * as ɵngcc0 from '@angular/core';
var DndHandleDirective = /** @class */ (function () {
    function DndHandleDirective(parent) {
        this.draggable = true;
        parent.registerDragHandle(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DndHandleDirective.prototype.onDragEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event._dndUsingHandle = true;
    };
    /** @nocollapse */
    DndHandleDirective.ctorParameters = function () { return [
        { type: DndDraggableDirective }
    ]; };
    DndHandleDirective.propDecorators = {
        draggable: [{ type: HostBinding, args: ["attr.draggable",] }],
        onDragEvent: [{ type: HostListener, args: ["dragstart", ["$event"],] }, { type: HostListener, args: ["dragend", ["$event"],] }]
    };
DndHandleDirective.ɵfac = function DndHandleDirective_Factory(t) { return new (t || DndHandleDirective)(ɵngcc0.ɵɵdirectiveInject(DndDraggableDirective)); };
DndHandleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DndHandleDirective, selectors: [["", "dndHandle", ""]], hostVars: 1, hostBindings: function DndHandleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dragstart", function DndHandleDirective_dragstart_HostBindingHandler($event) { return ctx.onDragEvent($event); })("dragend", function DndHandleDirective_dragend_HostBindingHandler($event) { return ctx.onDragEvent($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("draggable", ctx.draggable);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DndHandleDirective, [{
        type: Directive,
        args: [{
                selector: "[dndHandle]"
            }]
    }], function () { return [{ type: DndDraggableDirective }]; }, { draggable: [{
            type: HostBinding,
            args: ["attr.draggable"]
        }], onDragEvent: [{
            type: HostListener,
            args: ["dragstart", ["$event"]]
        }, {
            type: HostListener,
            args: ["dragend", ["$event"]]
        }] }); })();
    return DndHandleDirective;
}());
export { DndHandleDirective };
if (false) {
    /** @type {?} */
    DndHandleDirective.prototype.draggable;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLWhhbmRsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZHJhZy1kcm9wL2RuZC1oYW5kbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBRWxFO0FBR1UsSUFLUiw0QkFBYSxNQUE0QjtBQUFJLFFBRjdDLGNBQVMsR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFHSSxNQUFNLENBQUMsa0JBQWtCLENBQUUsSUFBSSxDQUFFLENBQUM7QUFDdEMsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUMxQjtBQUFRLElBQ1gsd0NBQVc7QUFBTztBQUVYO0FBQW1CO0FBQzFCLElBTEEsVUFFYSxLQUFjO0FBQUksUUFFN0IsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDakMsSUFBRSxDQUFDLENBZks7QUFBQzsrQkFIUixTQUFTLFNBQUUsakRBR29CO1FBRjlCLFFBQVEsRUFBRSxhQUFhLC9CQU9yQixnQkFWSyxxQkFBcUI7U0FJN0IsVEFKZ0M7QUFBVTtBQUd4Qyw0QkFJQSxXQUFXLFNBQUUsZ0JBQWdCO0FBQzVCLDhCQU9ELFlBQVksU0FBRSxXQUFXLEVBQUUsQ0FBRSxRQUFRLENBQUUsY0FDdkMsWUFBWSxTQUFFLFNBQVMsRUFBRSxDQUFFLFFBQVEsQ0FBRTtBQUNyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUFJVix5QkFBQztBQUNBLENBREEsQUFuQkQsSUFtQkM7QUFDRCxTQWpCYSxrQkFBa0I7QUFFL0I7QUFBYTtBQUFxQixJQUFoQyx1Q0FDaUI7O0FBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBUUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUZBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSkEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFuQkEsQUFtQkEsQUFoQkEsQUFBQSxBQUVBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG5kRXZlbnQgfSBmcm9tIFwiLi9kbmQtdXRpbHNcIjtcbmltcG9ydCB7IERuZERyYWdnYWJsZURpcmVjdGl2ZSB9IGZyb20gXCIuL2RuZC1kcmFnZ2FibGUuZGlyZWN0aXZlXCI7XG5cbkBEaXJlY3RpdmUoIHtcbiAgc2VsZWN0b3I6IFwiW2RuZEhhbmRsZV1cIlxufSApXG5leHBvcnQgY2xhc3MgRG5kSGFuZGxlRGlyZWN0aXZlIHtcblxuICBASG9zdEJpbmRpbmcoIFwiYXR0ci5kcmFnZ2FibGVcIiApXG4gIGRyYWdnYWJsZSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoIHBhcmVudDpEbmREcmFnZ2FibGVEaXJlY3RpdmUgKSB7XG5cbiAgICBwYXJlbnQucmVnaXN0ZXJEcmFnSGFuZGxlKCB0aGlzICk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCBcImRyYWdzdGFydFwiLCBbIFwiJGV2ZW50XCIgXSApXG4gIEBIb3N0TGlzdGVuZXIoIFwiZHJhZ2VuZFwiLCBbIFwiJGV2ZW50XCIgXSApXG4gIG9uRHJhZ0V2ZW50KCBldmVudDpEbmRFdmVudCApIHtcblxuICAgIGV2ZW50Ll9kbmRVc2luZ0hhbmRsZSA9IHRydWU7XG4gIH1cbn1cbiJdfQ==