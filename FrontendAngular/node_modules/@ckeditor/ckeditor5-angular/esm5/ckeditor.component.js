/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */
import { Component, Input, Output, NgZone, EventEmitter, forwardRef, ElementRef } from '@angular/core';
import EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';
import uid from './uid';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';

function CKEditorComponent_ng_template_0_Template(rf, ctx) { }
var CKEditorComponent = /** @class */ (function () {
    function CKEditorComponent(elementRef, ngZone) {
        /**
         * The configuration of the editor.
         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html
         * to learn more.
         */
        this.config = {};
        /**
         * The initial data of the editor. Useful when not using the ngModel.
         * See https://angular.io/api/forms/NgModel to learn more.
         */
        this.data = '';
        /**
         * Tag name of the editor component.
         *
         * The default tag is 'div'.
         */
        this.tagName = 'div';
        /**
         * Fires when the editor is ready. It corresponds with the `editor#ready`
         * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready
         * event.
         */
        this.ready = new EventEmitter();
        /**
         * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`
         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change
         * event.
         */
        this.change = new EventEmitter();
        /**
         * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`
         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur
         * event.
         */
        this.blur = new EventEmitter();
        /**
         * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`
         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus
         * event.
         */
        this.focus = new EventEmitter();
        /**
         * Fires when the editor component crashes.
         */
        this.error = new EventEmitter();
        /**
         * If the component is read–only before the editor instance is created, it remembers that state,
         * so the editor can become read–only once it is ready.
         */
        this.initiallyDisabled = false;
        /**
         * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.
         */
        this.isEditorSettingData = false;
        this.id = uid();
        this.ngZone = ngZone;
        this.elementRef = elementRef;
    }
    Object.defineProperty(CKEditorComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.editorInstance) {
                return this.editorInstance.isReadOnly;
            }
            return this.initiallyDisabled;
        },
        /**
         * When set `true`, the editor becomes read-only.
         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly
         * to learn more.
         */
        set: /**
         * When set `true`, the editor becomes read-only.
         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly
         * to learn more.
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.setDisabledState(isDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CKEditorComponent.prototype, "editorInstance", {
        /**
         * The instance of the editor created by this component.
         */
        get: /**
         * The instance of the editor created by this component.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var editorWatchdog = this.editorWatchdog;
            if (this.watchdog) {
                // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws
                // an error when the item is not registered yet.
                // See https://github.com/ckeditor/ckeditor5-angular/issues/177.
                editorWatchdog = this.watchdog._watchdogs.get(this.id);
            }
            if (editorWatchdog) {
                return editorWatchdog.editor;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    // Implementing the AfterViewInit interface.
    // Implementing the AfterViewInit interface.
    /**
     * @return {?}
     */
    CKEditorComponent.prototype.ngAfterViewInit = 
    // Implementing the AfterViewInit interface.
    /**
     * @return {?}
     */
    function () {
        this.attachToWatchdog();
    };
    // Implementing the OnDestroy interface.
    // Implementing the OnDestroy interface.
    /**
     * @return {?}
     */
    CKEditorComponent.prototype.ngOnDestroy = 
    // Implementing the OnDestroy interface.
    /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.watchdog) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.watchdog.remove(this.id)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(this.editorWatchdog && this.editorWatchdog.editor)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.editorWatchdog.destroy()];
                    case 3:
                        _a.sent();
                        this.editorWatchdog = undefined;
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} value
     * @return {?}
     */
    CKEditorComponent.prototype.writeValue = 
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // This method is called with the `null` value when the form resets.
        // A component's responsibility is to restore to the initial state.
        if (value === null) {
            value = '';
        }
        // If already initialized.
        if (this.editorInstance) {
            // The lock mechanism prevents from calling `cvaOnChange()` during changing
            // the editor state. See #139
            this.isEditorSettingData = true;
            this.editorInstance.setData(value);
            this.isEditorSettingData = false;
        }
        // If not, wait for it to be ready; store the data.
        else {
            this.data = value;
            // If the editor element is already available, then update its content.
            // If the ngModel is used then the editor element should be updated directly here.
            if (this.editorElement) {
                this.editorElement.innerHTML = this.data;
            }
        }
    };
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} callback
     * @return {?}
     */
    CKEditorComponent.prototype.registerOnChange = 
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        this.cvaOnChange = callback;
    };
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} callback
     * @return {?}
     */
    CKEditorComponent.prototype.registerOnTouched = 
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        this.cvaOnTouched = callback;
    };
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CKEditorComponent.prototype.setDisabledState = 
    // Implementing the ControlValueAccessor interface (only when binding to ngModel).
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        // If already initialized.
        if (this.editorInstance) {
            this.editorInstance.isReadOnly = isDisabled;
        }
        // Store the state anyway to use it once the editor is created.
        this.initiallyDisabled = isDisabled;
    };
    /**
     * Creates the editor instance, sets initial editor data, then integrates
     * the editor with the Angular component. This method does not use the `editor.setData()`
     * because of the issue in the collaboration mode (#6).
     */
    /**
     * Creates the editor instance, sets initial editor data, then integrates
     * the editor with the Angular component. This method does not use the `editor.setData()`
     * because of the issue in the collaboration mode (#6).
     * @private
     * @return {?}
     */
    CKEditorComponent.prototype.attachToWatchdog = /**
     * Creates the editor instance, sets initial editor data, then integrates
     * the editor with the Angular component. This method does not use the `editor.setData()`
     * because of the issue in the collaboration mode (#6).
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var creator = (/**
         * @param {?} element
         * @param {?} config
         * @return {?}
         */
        function (element, config) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.ngZone.runOutsideAngular((/**
                     * @return {?}
                     */
                    function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var editor;
                        var _this = this;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.elementRef.nativeElement.appendChild(element);
                                    return [4 /*yield*/, (/** @type {?} */ (this.editor)).create(element, config)];
                                case 1:
                                    editor = _a.sent();
                                    if (this.initiallyDisabled) {
                                        editor.isReadOnly = this.initiallyDisabled;
                                    }
                                    this.ngZone.run((/**
                                     * @return {?}
                                     */
                                    function () {
                                        _this.ready.emit(editor);
                                    }));
                                    this.setUpEditorEvents(editor);
                                    return [2 /*return*/, editor];
                            }
                        });
                    }); }))];
            });
        }); });
        /** @type {?} */
        var destructor = (/**
         * @param {?} editor
         * @return {?}
         */
        function (editor) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, editor.destroy()];
                    case 1:
                        _a.sent();
                        this.elementRef.nativeElement.removeChild((/** @type {?} */ (this.editorElement)));
                        return [2 /*return*/];
                }
            });
        }); });
        /** @type {?} */
        var emitError = (/**
         * @return {?}
         */
        function () {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.error.emit();
            }));
        });
        /** @type {?} */
        var element = document.createElement(this.tagName);
        /** @type {?} */
        var config = this.getConfig();
        this.editorElement = element;
        // Based on the presence of the watchdog decide how to initialize the editor.
        if (this.watchdog) {
            // When the context watchdog is passed add the new item to it based on the passed configuration.
            this.watchdog.add({
                id: this.id,
                type: 'editor',
                creator: creator,
                destructor: destructor,
                sourceElementOrData: element,
                config: config
            });
            this.watchdog.on('itemError', (/**
             * @param {?} _
             * @param {?} __1
             * @return {?}
             */
            function (_, _a) {
                var itemId = _a.itemId;
                if (itemId === _this.id) {
                    emitError();
                }
            }));
        }
        else {
            // In the other case create the watchdog by hand to keep the editor running.
            /** @type {?} */
            var editorWatchdog = new EditorWatchdog(this.editor);
            editorWatchdog.setCreator(creator);
            editorWatchdog.setDestructor(destructor);
            editorWatchdog.on('error', emitError);
            this.editorWatchdog = editorWatchdog;
            this.editorWatchdog.create(element, config);
        }
    };
    /**
     * @private
     * @return {?}
     */
    CKEditorComponent.prototype.getConfig = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.data && this.config.initialData) {
            throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');
        }
        // Merge two possible ways of providing data into the `config.initialData` field.
        return tslib_1.__assign({}, this.config, { initialData: this.config.initialData || this.data || '' });
    };
    /**
     * Integrates the editor with the component by attaching related event listeners.
     */
    /**
     * Integrates the editor with the component by attaching related event listeners.
     * @private
     * @param {?} editor
     * @return {?}
     */
    CKEditorComponent.prototype.setUpEditorEvents = /**
     * Integrates the editor with the component by attaching related event listeners.
     * @private
     * @param {?} editor
     * @return {?}
     */
    function (editor) {
        var _this = this;
        /** @type {?} */
        var modelDocument = editor.model.document;
        /** @type {?} */
        var viewDocument = editor.editing.view.document;
        modelDocument.on('change:data', (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                if (_this.cvaOnChange && !_this.isEditorSettingData) {
                    /** @type {?} */
                    var data = editor.getData();
                    _this.cvaOnChange(data);
                }
                _this.change.emit({ event: evt, editor: editor });
            }));
        }));
        viewDocument.on('focus', (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.focus.emit({ event: evt, editor: editor });
            }));
        }));
        viewDocument.on('blur', (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                if (_this.cvaOnTouched) {
                    _this.cvaOnTouched();
                }
                _this.blur.emit({ event: evt, editor: editor });
            }));
        }));
    };
    /** @nocollapse */
    CKEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    CKEditorComponent.propDecorators = {
        editor: [{ type: Input }],
        config: [{ type: Input }],
        data: [{ type: Input }],
        tagName: [{ type: Input }],
        watchdog: [{ type: Input }],
        disabled: [{ type: Input }],
        ready: [{ type: Output }],
        change: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        error: [{ type: Output }]
    };
CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) { return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
CKEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CKEditorComponent, selectors: [["ckeditor"]], inputs: { config: "config", data: "data", tagName: "tagName", disabled: "disabled", editor: "editor", watchdog: "watchdog" }, outputs: { ready: "ready", change: "change", blur: "blur", focus: "focus", error: "error" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                useExisting: forwardRef(( /**
                 * @return {?}
                 */function () { return CKEditorComponent; })),
                multi: true
            }
        ])], decls: 1, vars: 0, template: function CKEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, "ng-template");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CKEditorComponent, [{
        type: Component,
        args: [{
                selector: 'ckeditor',
                template: '<ng-template></ng-template>',
                // Integration with @angular/forms.
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */function () { return CKEditorComponent; })),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { config: [{
            type: Input
        }], data: [{
            type: Input
        }], tagName: [{
            type: Input
        }], ready: [{
            type: Output
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], error: [{
            type: Output
        }], disabled: [{
            type: Input
        }], editor: [{
            type: Input
        }], watchdog: [{
            type: Input
        }] }); })();
    return CKEditorComponent;
}());
export { CKEditorComponent };
if (false) {
    /**
     * The reference to the DOM element created by the component.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.elementRef;
    /**
     * The constructor of the editor to be used for the instance of the component.
     * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.
     * @type {?}
     */
    CKEditorComponent.prototype.editor;
    /**
     * The configuration of the editor.
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html
     * to learn more.
     * @type {?}
     */
    CKEditorComponent.prototype.config;
    /**
     * The initial data of the editor. Useful when not using the ngModel.
     * See https://angular.io/api/forms/NgModel to learn more.
     * @type {?}
     */
    CKEditorComponent.prototype.data;
    /**
     * Tag name of the editor component.
     *
     * The default tag is 'div'.
     * @type {?}
     */
    CKEditorComponent.prototype.tagName;
    /**
     * The context watchdog.
     * @type {?}
     */
    CKEditorComponent.prototype.watchdog;
    /**
     * Fires when the editor is ready. It corresponds with the `editor#ready`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready
     * event.
     * @type {?}
     */
    CKEditorComponent.prototype.ready;
    /**
     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change
     * event.
     * @type {?}
     */
    CKEditorComponent.prototype.change;
    /**
     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur
     * event.
     * @type {?}
     */
    CKEditorComponent.prototype.blur;
    /**
     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus
     * event.
     * @type {?}
     */
    CKEditorComponent.prototype.focus;
    /**
     * Fires when the editor component crashes.
     * @type {?}
     */
    CKEditorComponent.prototype.error;
    /**
     * The editor watchdog. It is created when the context watchdog is not passed to the component.
     * It keeps the editor running.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.editorWatchdog;
    /**
     * If the component is read–only before the editor instance is created, it remembers that state,
     * so the editor can become read–only once it is ready.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.initiallyDisabled;
    /**
     * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor
     * withing the Angular event loop.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.ngZone;
    /**
     * A callback executed when the content of the editor changes. Part of the
     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.
     *
     * Note: Unset unless the component uses the `ngModel`.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.cvaOnChange;
    /**
     * A callback executed when the editor has been blurred. Part of the
     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.
     *
     * Note: Unset unless the component uses the `ngModel`.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.cvaOnTouched;
    /**
     * Reference to the source element used by the editor.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.editorElement;
    /**
     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.isEditorSettingData;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.id;
}
/**
 * @record
 */
export function BlurEvent() { }
if (false) {
    /** @type {?} */
    BlurEvent.prototype.event;
    /** @type {?} */
    BlurEvent.prototype.editor;
}
/**
 * @record
 */
export function FocusEvent() { }
if (false) {
    /** @type {?} */
    FocusEvent.prototype.event;
    /** @type {?} */
    FocusEvent.prototype.editor;
}
/**
 * @record
 */
export function ChangeEvent() { }
if (false) {
    /** @type {?} */
    ChangeEvent.prototype.event;
    /** @type {?} */
    ChangeEvent.prototype.editor;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,