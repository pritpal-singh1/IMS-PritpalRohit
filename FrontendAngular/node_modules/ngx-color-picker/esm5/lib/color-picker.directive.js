import { __decorate } from "tslib";
import { Directive, OnChanges, OnDestroy, Input, Output, EventEmitter, HostListener, ApplicationRef, ComponentRef, ElementRef, ViewContainerRef, Injector, ReflectiveInjector, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';
import { ColorPickerService } from './color-picker.service';
import { ColorPickerComponent } from './color-picker.component';
import * as Éµngcc0 from '@angular/core';
var ColorPickerDirective = /** @class */ (function () {
    function ColorPickerDirective(injector, cfr, appRef, vcRef, elRef, _service) {
        this.injector = injector;
        this.cfr = cfr;
        this.appRef = appRef;
        this.vcRef = vcRef;
        this.elRef = elRef;
        this._service = _service;
        this.dialogCreated = false;
        this.ignoreChanges = false;
        this.viewAttachedToAppRef = false;
        this.cpWidth = '230px';
        this.cpHeight = 'auto';
        this.cpToggle = false;
        this.cpDisabled = false;
        this.cpIgnoredElements = [];
        this.cpFallbackColor = '';
        this.cpColorMode = 'color';
        this.cpCmykEnabled = false;
        this.cpOutputFormat = 'auto';
        this.cpAlphaChannel = 'enabled';
        this.cpDisableInput = false;
        this.cpDialogDisplay = 'popup';
        this.cpSaveClickOutside = true;
        this.cpCloseClickOutside = true;
        this.cpUseRootViewContainer = false;
        this.cpPosition = 'auto';
        this.cpPositionOffset = '0%';
        this.cpPositionRelativeToArrow = false;
        this.cpOKButton = false;
        this.cpOKButtonText = 'OK';
        this.cpOKButtonClass = 'cp-ok-button-class';
        this.cpCancelButton = false;
        this.cpCancelButtonText = 'Cancel';
        this.cpCancelButtonClass = 'cp-cancel-button-class';
        this.cpPresetLabel = 'Preset colors';
        this.cpPresetColorsClass = 'cp-preset-colors-class';
        this.cpMaxPresetColorsLength = 6;
        this.cpPresetEmptyMessage = 'No colors added';
        this.cpPresetEmptyMessageClass = 'preset-empty-message';
        this.cpAddColorButton = false;
        this.cpAddColorButtonText = 'Add color';
        this.cpAddColorButtonClass = 'cp-add-color-button-class';
        this.cpRemoveColorButtonClass = 'cp-remove-color-button-class';
        this.cpInputChange = new EventEmitter(true);
        this.cpToggleChange = new EventEmitter(true);
        this.cpSliderChange = new EventEmitter(true);
        this.cpSliderDragEnd = new EventEmitter(true);
        this.cpSliderDragStart = new EventEmitter(true);
        this.colorPickerOpen = new EventEmitter(true);
        this.colorPickerClose = new EventEmitter(true);
        this.colorPickerCancel = new EventEmitter(true);
        this.colorPickerSelect = new EventEmitter(true);
        this.colorPickerChange = new EventEmitter(false);
        this.cpCmykColorChange = new EventEmitter(true);
        this.cpPresetColorsChange = new EventEmitter(true);
    }
    ColorPickerDirective.prototype.handleClick = function () {
        this.inputFocus();
    };
    ColorPickerDirective.prototype.handleFocus = function () {
        this.inputFocus();
    };
    ColorPickerDirective.prototype.handleInput = function (event) {
        this.inputChange(event);
    };
    ColorPickerDirective.prototype.ngOnDestroy = function () {
        if (this.cmpRef != null) {
            if (this.viewAttachedToAppRef) {
                this.appRef.detachView(this.cmpRef.hostView);
            }
            this.cmpRef.destroy();
            this.cmpRef = null;
            this.dialog = null;
        }
    };
    ColorPickerDirective.prototype.ngOnChanges = function (changes) {
        if (changes.cpToggle && !this.cpDisabled) {
            if (changes.cpToggle.currentValue) {
                this.openDialog();
            }
            else if (!changes.cpToggle.currentValue) {
                this.closeDialog();
            }
        }
        if (changes.colorPicker) {
            if (this.dialog && !this.ignoreChanges) {
                if (this.cpDialogDisplay === 'inline') {
                    this.dialog.setInitialColor(changes.colorPicker.currentValue);
                }
                this.dialog.setColorFromString(changes.colorPicker.currentValue, false);
                if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {
                    this.cmpRef.changeDetectorRef.detectChanges();
                }
            }
            this.ignoreChanges = false;
        }
        if (changes.cpPresetLabel || changes.cpPresetColors) {
            if (this.dialog) {
                this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);
            }
        }
    };
    ColorPickerDirective.prototype.openDialog = function () {
        if (!this.dialogCreated) {
            var vcRef = this.vcRef;
            this.dialogCreated = true;
            this.viewAttachedToAppRef = false;
            if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {
                var classOfRootComponent = this.appRef.componentTypes[0];
                var appInstance = this.injector.get(classOfRootComponent, Injector.NULL);
                if (appInstance !== Injector.NULL) {
                    vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;
                    if (vcRef === this.vcRef) {
                        console.warn('You are using cpUseRootViewContainer, ' +
                            'but the root component is not exposing viewContainerRef!' +
                            'Please expose it by adding \'public vcRef: ViewContainerRef\' to the constructor.');
                    }
                }
                else {
                    this.viewAttachedToAppRef = true;
                }
            }
            var compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);
            if (this.viewAttachedToAppRef) {
                this.cmpRef = compFactory.create(this.injector);
                this.appRef.attachView(this.cmpRef.hostView);
                document.body.appendChild(this.cmpRef.hostView.rootNodes[0]);
            }
            else {
                var injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);
                this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);
            }
            this.cmpRef.instance.setupDialog(this, this.elRef, this.colorPicker, this.cpWidth, this.cpHeight, this.cpDialogDisplay, this.cpFallbackColor, this.cpColorMode, this.cpCmykEnabled, this.cpAlphaChannel, this.cpOutputFormat, this.cpDisableInput, this.cpIgnoredElements, this.cpSaveClickOutside, this.cpCloseClickOutside, this.cpUseRootViewContainer, this.cpPosition, this.cpPositionOffset, this.cpPositionRelativeToArrow, this.cpPresetLabel, this.cpPresetColors, this.cpPresetColorsClass, this.cpMaxPresetColorsLength, this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass, this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText, this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText, this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText, this.cpRemoveColorButtonClass);
            this.dialog = this.cmpRef.instance;
            if (this.vcRef !== vcRef) {
                this.cmpRef.changeDetectorRef.detectChanges();
            }
        }
        else if (this.dialog) {
            this.dialog.openDialog(this.colorPicker);
        }
    };
    ColorPickerDirective.prototype.closeDialog = function () {
        if (this.dialog && this.cpDialogDisplay === 'popup') {
            this.dialog.closeDialog();
        }
    };
    ColorPickerDirective.prototype.cmykChanged = function (value) {
        this.cpCmykColorChange.emit(value);
    };
    ColorPickerDirective.prototype.stateChanged = function (state) {
        this.cpToggleChange.emit(state);
        if (state) {
            this.colorPickerOpen.emit(this.colorPicker);
        }
        else {
            this.colorPickerClose.emit(this.colorPicker);
        }
    };
    ColorPickerDirective.prototype.colorChanged = function (value, ignore) {
        if (ignore === void 0) { ignore = true; }
        this.ignoreChanges = ignore;
        this.colorPickerChange.emit(value);
    };
    ColorPickerDirective.prototype.colorSelected = function (value) {
        this.colorPickerSelect.emit(value);
    };
    ColorPickerDirective.prototype.colorCanceled = function () {
        this.colorPickerCancel.emit();
    };
    ColorPickerDirective.prototype.inputFocus = function () {
        var element = this.elRef.nativeElement;
        var ignored = this.cpIgnoredElements.filter(function (item) { return item === element; });
        if (!this.cpDisabled && !ignored.length) {
            if (typeof document !== 'undefined' && element === document.activeElement) {
                this.openDialog();
            }
            else if (!this.dialog || !this.dialog.show) {
                this.openDialog();
            }
            else {
                this.closeDialog();
            }
        }
    };
    ColorPickerDirective.prototype.inputChange = function (event) {
        if (this.dialog) {
            this.dialog.setColorFromString(event.target.value, true);
        }
        else {
            this.colorPicker = event.target.value;
            this.colorPickerChange.emit(this.colorPicker);
        }
    };
    ColorPickerDirective.prototype.inputChanged = function (event) {
        this.cpInputChange.emit(event);
    };
    ColorPickerDirective.prototype.sliderChanged = function (event) {
        this.cpSliderChange.emit(event);
    };
    ColorPickerDirective.prototype.sliderDragEnd = function (event) {
        this.cpSliderDragEnd.emit(event);
    };
    ColorPickerDirective.prototype.sliderDragStart = function (event) {
        this.cpSliderDragStart.emit(event);
    };
    ColorPickerDirective.prototype.presetColorsChanged = function (value) {
        this.cpPresetColorsChange.emit(value);
    };
    ColorPickerDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: ColorPickerService }
    ]; };
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "colorPicker", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpWidth", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpHeight", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpToggle", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpDisabled", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpIgnoredElements", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpFallbackColor", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpColorMode", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpCmykEnabled", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpOutputFormat", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpAlphaChannel", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpDisableInput", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpDialogDisplay", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpSaveClickOutside", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpCloseClickOutside", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpUseRootViewContainer", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPosition", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPositionOffset", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPositionRelativeToArrow", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpOKButton", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpOKButtonText", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpOKButtonClass", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpCancelButton", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpCancelButtonText", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpCancelButtonClass", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPresetLabel", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPresetColors", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPresetColorsClass", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpMaxPresetColorsLength", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPresetEmptyMessage", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpPresetEmptyMessageClass", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpAddColorButton", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpAddColorButtonText", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpAddColorButtonClass", void 0);
    __decorate([
        Input()
    ], ColorPickerDirective.prototype, "cpRemoveColorButtonClass", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpInputChange", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpToggleChange", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpSliderChange", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpSliderDragEnd", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpSliderDragStart", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "colorPickerOpen", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "colorPickerClose", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "colorPickerCancel", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "colorPickerSelect", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "colorPickerChange", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpCmykColorChange", void 0);
    __decorate([
        Output()
    ], ColorPickerDirective.prototype, "cpPresetColorsChange", void 0);
    __decorate([
        HostListener('click')
    ], ColorPickerDirective.prototype, "handleClick", null);
    __decorate([
        HostListener('focus')
    ], ColorPickerDirective.prototype, "handleFocus", null);
    __decorate([
        HostListener('input', ['$event'])
    ], ColorPickerDirective.prototype, "handleInput", null);
ColorPickerDirective.Éµfac = function ColorPickerDirective_Factory(t) { return new (t || ColorPickerDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Injector), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ApplicationRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(ColorPickerService)); };
ColorPickerDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: ColorPickerDirective, selectors: [["", "colorPicker", ""]], hostBindings: function ColorPickerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµlistener("click", function ColorPickerDirective_click_HostBindingHandler() { return ctx.handleClick(); })("focus", function ColorPickerDirective_focus_HostBindingHandler() { return ctx.handleFocus(); })("input", function ColorPickerDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); });
    } }, inputs: { cpWidth: "cpWidth", cpHeight: "cpHeight", cpToggle: "cpToggle", cpDisabled: "cpDisabled", cpIgnoredElements: "cpIgnoredElements", cpFallbackColor: "cpFallbackColor", cpColorMode: "cpColorMode", cpCmykEnabled: "cpCmykEnabled", cpOutputFormat: "cpOutputFormat", cpAlphaChannel: "cpAlphaChannel", cpDisableInput: "cpDisableInput", cpDialogDisplay: "cpDialogDisplay", cpSaveClickOutside: "cpSaveClickOutside", cpCloseClickOutside: "cpCloseClickOutside", cpUseRootViewContainer: "cpUseRootViewContainer", cpPosition: "cpPosition", cpPositionOffset: "cpPositionOffset", cpPositionRelativeToArrow: "cpPositionRelativeToArrow", cpOKButton: "cpOKButton", cpOKButtonText: "cpOKButtonText", cpOKButtonClass: "cpOKButtonClass", cpCancelButton: "cpCancelButton", cpCancelButtonText: "cpCancelButtonText", cpCancelButtonClass: "cpCancelButtonClass", cpPresetLabel: "cpPresetLabel", cpPresetColorsClass: "cpPresetColorsClass", cpMaxPresetColorsLength: "cpMaxPresetColorsLength", cpPresetEmptyMessage: "cpPresetEmptyMessage", cpPresetEmptyMessageClass: "cpPresetEmptyMessageClass", cpAddColorButton: "cpAddColorButton", cpAddColorButtonText: "cpAddColorButtonText", cpAddColorButtonClass: "cpAddColorButtonClass", cpRemoveColorButtonClass: "cpRemoveColorButtonClass", colorPicker: "colorPicker", cpPresetColors: "cpPresetColors" }, outputs: { cpInputChange: "cpInputChange", cpToggleChange: "cpToggleChange", cpSliderChange: "cpSliderChange", cpSliderDragEnd: "cpSliderDragEnd", cpSliderDragStart: "cpSliderDragStart", colorPickerOpen: "colorPickerOpen", colorPickerClose: "colorPickerClose", colorPickerCancel: "colorPickerCancel", colorPickerSelect: "colorPickerSelect", colorPickerChange: "colorPickerChange", cpCmykColorChange: "cpCmykColorChange", cpPresetColorsChange: "cpPresetColorsChange" }, exportAs: ["ngxColorPicker"], features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ColorPickerDirective, [{
        type: Directive,
        args: [{
                selector: '[colorPicker]',
                exportAs: 'ngxColorPicker'
            }]
    }], function () { return [{ type: Éµngcc0.Injector }, { type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ApplicationRef }, { type: Éµngcc0.ViewContainerRef }, { type: Éµngcc0.ElementRef }, { type: ColorPickerService }]; }, { cpWidth: [{
            type: Input
        }], cpHeight: [{
            type: Input
        }], cpToggle: [{
            type: Input
        }], cpDisabled: [{
            type: Input
        }], cpIgnoredElements: [{
            type: Input
        }], cpFallbackColor: [{
            type: Input
        }], cpColorMode: [{
            type: Input
        }], cpCmykEnabled: [{
            type: Input
        }], cpOutputFormat: [{
            type: Input
        }], cpAlphaChannel: [{
            type: Input
        }], cpDisableInput: [{
            type: Input
        }], cpDialogDisplay: [{
            type: Input
        }], cpSaveClickOutside: [{
            type: Input
        }], cpCloseClickOutside: [{
            type: Input
        }], cpUseRootViewContainer: [{
            type: Input
        }], cpPosition: [{
            type: Input
        }], cpPositionOffset: [{
            type: Input
        }], cpPositionRelativeToArrow: [{
            type: Input
        }], cpOKButton: [{
            type: Input
        }], cpOKButtonText: [{
            type: Input
        }], cpOKButtonClass: [{
            type: Input
        }], cpCancelButton: [{
            type: Input
        }], cpCancelButtonText: [{
            type: Input
        }], cpCancelButtonClass: [{
            type: Input
        }], cpPresetLabel: [{
            type: Input
        }], cpPresetColorsClass: [{
            type: Input
        }], cpMaxPresetColorsLength: [{
            type: Input
        }], cpPresetEmptyMessage: [{
            type: Input
        }], cpPresetEmptyMessageClass: [{
            type: Input
        }], cpAddColorButton: [{
            type: Input
        }], cpAddColorButtonText: [{
            type: Input
        }], cpAddColorButtonClass: [{
            type: Input
        }], cpRemoveColorButtonClass: [{
            type: Input
        }], cpInputChange: [{
            type: Output
        }], cpToggleChange: [{
            type: Output
        }], cpSliderChange: [{
            type: Output
        }], cpSliderDragEnd: [{
            type: Output
        }], cpSliderDragStart: [{
            type: Output
        }], colorPickerOpen: [{
            type: Output
        }], colorPickerClose: [{
            type: Output
        }], colorPickerCancel: [{
            type: Output
        }], colorPickerSelect: [{
            type: Output
        }], colorPickerChange: [{
            type: Output
        }], cpCmykColorChange: [{
            type: Output
        }], cpPresetColorsChange: [{
            type: Output
        }], handleClick: [{
            type: HostListener,
            args: ['click']
        }], handleFocus: [{
            type: HostListener,
            args: ['focus']
        }], handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], colorPicker: [{
            type: Input
        }], cpPresetColors: [{
            type: Input
        }] }); })();
    return ColorPickerDirective;
}());
export { ColorPickerDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,